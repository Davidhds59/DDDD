<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    
    <!-- Google Fonts -->
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
    <!-- Material Icons -->
    <link href="https://fonts.googleapis.com/icon?family=Material+Icons+Round" rel="stylesheet">
    <!-- AOS CSS -->
    <link href="https://cdnjs.cloudflare.com/ajax/libs/aos/2.3.4/aos.css" rel="stylesheet">
    <!-- Plyr CSS -->
    <link rel="stylesheet" href="https://cdn.plyr.io/3.7.8/plyr.css" />
    
    <title>Detalle de Pel√≠cula</title>
    
    <style>
   :root {
    --primary-color: #3b82f6; /* Azul elegante */
    --primary-dark: #1e40af;
    --background: #0e0e12; /* Gris muy oscuro con azul neutro */
    --surface: #1a1d24;
    --surface-light: #2c2f36;
    --text-primary: #ffffff;
    --text-secondary: #9ca3af;
    --success: #10b981;
    --danger: #ef4444;
    --warning: #f59e0b;
    --gradient-primary: linear-gradient(135deg, #3b82f6 0%, #1e3a8a 100%);
    --gradient-secondary: linear-gradient(135deg, #1e3a8a 0%, #0e0e12 100%);
}
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Inter', sans-serif;
            background: var(--background);
            color: var(--text-primary);
            line-height: 1.6;
            overflow-x: hidden;
        }

        .container {
            width: 100%;
            max-width: 1400px;
            margin: 0 auto;
            padding: 0 1.5rem;
        }

        .movie-hero {
            position: relative;
            min-height: 80vh;
            background-size: cover;
            background-position: center;
            background-repeat: no-repeat;
            display: flex;
            align-items: flex-end;
            padding: 3rem 0;
            border-bottom: 1px solid rgba(255,255,255,0.1);
        }

        .movie-hero::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: linear-gradient(to bottom,
                rgba(15, 15, 26, 0.3) 0%,
                rgba(15, 15, 26, 0.7) 50%,
                rgba(15, 15, 26, 0.95) 100%
            );
            z-index: 1;
        }

        .movie-content {
            position: relative;
            z-index: 2;
            display: grid;
            grid-template-columns: 1fr;
            gap: 3rem;
            width: 100%;
        }

        @media (min-width: 992px) {
            .movie-content {
                grid-template-columns: 350px 1fr;
            }
        }

        .poster {
            width: 40%;
            max-width: 350px;
            border-radius: 1.5rem;
            box-shadow: 0 25px 50px -12px rgba(0, 0, 0, 0.4);
            transition: transform 0.3s ease;
        }

        .poster:hover {
            transform: scale(1.03);
        }
        
        

        .movie-info {
            display: flex;
            flex-direction: column;
            gap: 2rem;
        }

        .title-section h1 {
            font-size: 3rem;
            margin-bottom: 1rem;
            font-weight: 800;
            color: var(--text-primary);
            line-height: 1.2;
        }

        .meta-info {
            display: flex;
            flex-wrap: wrap;
            gap: 1.5rem;
            align-items: center;
            color: var(--text-secondary);
        }

        .meta-item {
            display: flex;
            align-items: center;
            gap: 0.5rem;
            font-size: 1.1rem;
        }

        .rating {
            display: inline-flex;
            align-items: center;
            gap: 0.5rem;
            padding: 0.75rem 1.25rem;
            background: var(--surface);
            border-radius: 2rem;
            font-weight: 600;
            backdrop-filter: blur(5px);
        }

        .rating-value {
            font-weight: 700;
            color: var(--warning);
        }

        .genres {
            display: flex;
            flex-wrap: wrap;
            gap: 0.75rem;
            margin-top: 1.5rem;
        }

        .genre-tag {
            padding: 0.75rem 1.25rem;
            background: #cb4335;
            border-radius: 2rem;
            font-size: 0.95rem;
            font-weight: 500;
            transition: all 0.2s ease;
        }

        .genre-tag:hover {
            background: var(--primary-color);
            color: white;
            transform: translateY(-2px);
        }

        .synopsis {
            max-width: 800px;
            color: var(--text-secondary);
            font-size: 1.1rem;
            line-height: 1.8;
            position: relative;
        }

        .synopsis-content {
            overflow: hidden;
            transition: max-height 0.3s ease;
        }

        .synopsis.collapsed .synopsis-content {
            max-height: 4.5em;
            display: -webkit-box;
            -webkit-line-clamp: 3;
            -webkit-box-orient: vertical;
        }

        .read-more {
            color: var(--primary-color);
            cursor: pointer;
            font-weight: 600;
            margin-top: 0.5rem;
            display: inline-block;
            transition: color 0.2s ease;
        }

        .read-more:hover {
            color: var(--primary-dark);
        }

        .play-section {
            margin-top: 2.5rem;
        }

        .play-button {
            display: inline-flex;
            align-items: center;
            gap: 1rem;
            padding: 1.25rem 1.5rem;
            background: #cb4335;
            color: white;
            border: none;
            border-radius: 1rem;
            font-size: 1.1rem;
            font-weight: 700;
            cursor: pointer;
            transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
            box-shadow: 0 10px 20px rgba(106, 76, 147, 0.3);
            transition: all 0.2s;
            animation: pulso 1s infinite;
        }
        
         @keyframes pulso {
    0% { transform: scale(1); }
    50% { transform: scale(1.05); }
    100% { transform: scale(1); }
  }
  

        .play-button:hover {
            background: var(--gradient-secondary);
            transform: translateY(-3px);
            box-shadow: 0 15px 30px rgba(106, 76, 147, 0.4);
        }

        .stream-options {
            display: none;
            margin-top: 1.5rem;
            background: var(--surface);
            border-radius: 1rem;
            overflow: hidden;
            box-shadow: 0 10px 15px rgba(0,0,0,0.1);
        }

        .stream-options.active {
            display: block;
            animation: fadeIn 0.3s ease-out;
        }

        .stream-option {
            display: flex;
            align-items: center;
            gap: 1.5rem;
            padding: 1.25rem;
            background: transparent;
            border: none;
            width: 100%;
            color: var(--text-primary);
            cursor: pointer;
            transition: all 0.2s ease;
            border-bottom: 1px solid rgba(255,255,255,0.05);
        }

        .stream-option:last-child {
            border-bottom: none;
        }

        .stream-option:hover {
            background: var(--surface-light);
        }

        .stream-option span {
            font-weight: 600;
            font-size: 1.05rem;
        }

        .player-container {
    display: none;
    margin: 1.5rem auto 0;
    background: #000;
    border-radius: 0.8rem;
    overflow: hidden;
    position: relative;
    width: 90%;
    max-width: 700px;
    height: auto;
    aspect-ratio: 16/9;
    box-shadow: 0 10px 25px rgba(0,0,0,0.3);
}
.plyr--video {
    height: 100%;
    width: 100%;
    margin: 0 auto;
}
        .plyr--fullscreen .plyr__poster {
    background-size: cover !important;
    transform: scale(0.9); /* Ajuste para pantalla completa */
}
    

        /* Estilos mejorados para el reproductor */
        .video-container, .embed-container {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: #000;
        }

       #player {
    width: 100%;
    height: 100%;
    object-fit: cover;
    background: #000;
    display: block;
}
        

        .player-container iframe {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            border: none;
            background: #000;
        }

        /* Estilos para el loader del reproductor */
        .player-loading {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            background: rgba(0,0,0,0.8);
            z-index: 10;
        }

        .player-loading .loading-spinner {
            width: 50px;
            height: 50px;
            border: 5px solid rgba(106, 76, 147, 0.3);
            border-radius: 50%;
            border-top-color: var(--primary-color);
            animation: spin 1s ease-in-out infinite;
            margin-bottom: 1rem;
        }

        .player-loading .loading-text {
            color: white;
            font-size: 1.1rem;
        }

        /* Estilos para mensajes de error */
        .player-error {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            background: rgba(0,0,0,0.9);
            padding: 2rem;
            text-align: center;
            z-index: 10;
        }

        .player-error .material-icons-round {
            font-size: 3rem;
            color: var(--danger);
            margin-bottom: 1rem;
        }

        .player-error h3 {
            font-size: 1.5rem;
            margin-bottom: 0.5rem;
            color: white;
        }

        .player-error p {
            color: var(--text-secondary);
            margin-bottom: 1rem;
        }

        .player-error .retry-button {
            padding: 0.75rem 1.5rem;
            background: var(--primary-color);
            color: white;
            border: none;
            border-radius: 0.5rem;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.2s ease;
        }

        .player-error .retry-button:hover {
            background: var(--primary-dark);
        }

        .back-button {
            position: fixed;
            top: 2.5rem;
            left: 2.5rem;
            z-index: 10;
            background: rgba(26, 26, 46, 0.8);
            backdrop-filter: blur(10px);
            border: none;
            color: white;
            padding: 1rem;
            border-radius: 50%;
            cursor: pointer;
            transition: all 0.3s ease;
            box-shadow: 0 5px 15px rgba(0,0,0,0.2);
        }

        .back-button:hover {
            background: var(--primary-color);
            transform: scale(1.1);
        }

        /* Nuevos estilos para stats m√°s compactos */
        .stats-section {
            margin: 2rem 0;
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(180px, 1fr));
            gap: 1rem;
        }

        .stat-card {
            background: var(--surface);
            padding: 1.5rem;
            border-radius: 1rem;
            text-align: center;
            transition: all 0.3s ease;
            box-shadow: 0 5px 10px -3px rgba(0,0,0,0.1);
        }

        .stat-card:hover {
            transform: translateY(-3px);
            box-shadow: 0 10px 15px -5px rgba(0,0,0,0.2);
        }

        .stat-value {
            font-size: 1.8rem;
            font-weight: 800;
            margin-bottom: 0.5rem;
            background: var(--gradient-primary);
            -webkit-background-clip: text;
            background-clip: text;
            color: transparent;
        }

        .stat-label {
            color: var(--text-secondary);
            font-size: 0.9rem;
            font-weight: 500;
        }

        /* Secci√≥n de pel√≠culas relacionadas */
        .related-section {
            margin: 4rem 0;
        }

        .section-title {
            font-size: 0.9rem;
            margin-bottom: 1.5rem;
            font-weight: 700;
            color: var(--text-primary);
            position: relative;
            padding-bottom: 0.5rem;
        }

        .section-title::after {
            content: '';
            position: absolute;
            bottom: 0;
            left: 0;
            width: 60px;
            height: 3px;
            background: #cb4335;
            border-radius: 3px;
        }

        .related-movies-container {
            position: relative;
            width: 100%;
            overflow: hidden;
        }

        .related-movies-scroll {
            display: flex;
            gap: 1.5rem;
            padding: 1rem 0;
            overflow-x: auto;
            scroll-behavior: smooth;
            -webkit-overflow-scrolling: touch;
            scrollbar-width: none;
        }

        .related-movies-scroll::-webkit-scrollbar {
            display: none;
        }

        .related-movie {
            flex: 0 0 auto;
            width: 200px;
            background: var(--surface);
            border-radius: 0.8rem;
            overflow: hidden;
            transition: all 0.3s ease;
            position: relative;
            cursor: pointer;
        }

        .related-movie:hover {
            transform: translateY(-5px);
            box-shadow: 0 10px 20px rgba(0,0,0,0.2);
        }

        .related-poster {
            width: 100%;
            height: 280px;
            object-fit: cover;
            display: block;
        }

        .related-info {
            padding: 1rem;
        }

        .related-title {
            font-size: 1rem;
            font-weight: 600;
            margin-bottom: 0.5rem;
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
        }

        .related-meta {
            display: flex;
            justify-content: space-between;
            font-size: 0.85rem;
            color: var(--text-secondary);
        }

        .scroll-button {
            position: absolute;
            top: 50%;
            transform: translateY(-50%);
            width: 40px;
            height: 40px;
            background: rgba(26, 26, 46, 0.8);
            border: none;
            border-radius: 50%;
            color: white;
            font-size: 1.2rem;
            cursor: pointer;
            z-index: 2;
            display: flex;
            align-items: center;
            justify-content: center;
            opacity: 0;
            transition: opacity 0.3s ease;
        }

        .scroll-button.left {
            left: 10px;
        }

        .scroll-button.right {
            right: 10px;
        }

        .related-movies-container:hover .scroll-button {
            opacity: 1;
        }

        /* Loading message */
        .loading-message {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(15, 15, 26, 0.9);
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            z-index: 1000;
            opacity: 0;
            visibility: hidden;
            transition: opacity 0.3s ease, visibility 0.3s ease;
        }

        .loading-message.active {
            opacity: 1;
            visibility: visible;
        }

        .loading-spinner {
            width: 50px;
            height: 50px;
            border: 5px solid rgba(106, 76, 147, 0.3);
            border-radius: 50%;
            border-top-color: var(--primary-color);
            animation: spin 1s ease-in-out infinite;
            margin-bottom: 1.5rem;
        }

        .loading-text {
            font-size: 1.2rem;
            color: var(--text-primary);
            font-weight: 500;
        }

        /* Animaciones */
        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(10px); }
            to { opacity: 1; transform: translateY(0); }
        }

        @keyframes spin {
            to { transform: rotate(360deg); }
        }

        /* Plyr Custom Styles */
        .plyr--video {
            border-radius: 1rem;
            overflow: hidden;
            background: #000;
        }

        .plyr__control--overlaid {
            background: var(--gradient-primary) !important;
        }

        .plyr--full-ui input[type="range"] {
            color: var(--primary-color) !important;
        }

        .plyr__menu__container .plyr__control {
            color: var(--text-primary) !important;
        }

        /* Responsive */
        @media (max-width: 1200px) {
            .title-section h1 {
                font-size: 2.5rem;
            }
        }

        @media (max-width: 992px) {
            .movie-hero {
                min-height: 70vh;
            }
            
            .poster {
                max-width: 300px;
                margin: 0 auto;
            }
            
            .title-section h1 {
                font-size: 2.2rem;
                text-align: center;
            }
            
            .meta-info {
                justify-content: center;
            }
            
            .genres {
                justify-content: center;
            }
            
            .play-button {
                width: 100%;
                justify-content: center;
            }
        }

        @media (max-width: 768px) {
            .movie-hero {
                min-height: 60vh;
                padding: 2rem 0;
            }
            
            .title-section h1 {
                font-size: 2rem;
            }
            
            .meta-item {
                font-size: 1rem;
            }
            
            .stat-card {
                padding: 1.2rem;
            }
            
            .stat-value {
                font-size: 1.5rem;
            }

            .related-movie {
                width: 180px;
            }

            .related-poster {
                height: 250px;
            }
        }

        @media (max-width: 576px) {
            .container {
                padding: 0 1rem;
            }
            
            .movie-hero {
                min-height: 50vh;
            }
            
            .title-section h1 {
                font-size: 1.8rem;
            }
            
            .meta-info {
                gap: 1rem;
            }
            
            .play-button {
                padding: 1rem 1.5rem;
                font-size: 1rem;
            }
            
            .back-button {
                top: 1.5rem;
                left: 1.5rem;
                padding: 0.75rem;
            }
            
            .stats-section {
                grid-template-columns: 1fr;
            }

            .related-movie {
                width: 150px;
            }

            .related-poster {
                height: 220px;
            }

            .scroll-button {
                width: 30px;
                height: 30px;
                font-size: 1rem;
            }
        }
        
        
         .video-container video,
.video-container .plyr {
  width: 100%;
  height: 100%;
  object-fit: cover;
}
        
        
        .plyr__control--overlaid {
  display: none !important;
}

.plyr__controls button {
  background-color:  !important;
  color: #fff !important;
  border-radius: 8px !important;
  padding: 4px 7px !important;
  border: none !important;
}

.plyr__controls button:hover {
  background-color: #444 !important;
}
.plyr__volume {
  display: none !important;
}
    </style>
</head>
<body>
    <!-- Loading message -->
    <div class="loading-message" id="loading-message">
        <div class="loading-spinner"></div>
        <div class="loading-text">Cargando datos de pel√≠cula...</div>
    </div>

    <main>
       

        <div class="movie-hero" id="movie-backdrop">
            <div class="container">
                <div class="movie-content">
                    <img src="" alt="" class="poster" id="movie-poster">
                    
                    <div class="movie-info">
                        <div class="title-section">
                            <h1 id="movie-title">Cargando...</h1>
                            <div class="meta-info">
                                <div class="meta-item">
                                    <span class="material-icons-round">calendar_today</span>
                                    <span id="release-date">Cargando...</span>
                                </div>
                                <div class="meta-item">
                                    <span class="material-icons-round">schedule</span>
                                    <span id="runtime">Cargando...</span>
                                </div>
                                <div class="rating">
                                    <span class="material-icons-round">hotel_class</span>
                                    <span class="rating-value" id="rating">0.0</span>
                                </div>
                            </div>
                            <div class="genres" id="genres"></div>
                        </div>

                        <div class="synopsis collapsed" id="synopsis-container">
                            <div class="synopsis-content" id="synopsis">Cargando...</div>
                            <span class="read-more" id="read-more">Ver m√°s</span>
                        </div>

                        <div class="play-section">
                            <button class="play-button" id="play-button">
                                <span class="material-icons-round">play_arrow</span>
                                Reproducir
                            </button>

                            <div class="stream-options" id="stream-options"></div>

                            <div class="player-container" id="player-container"></div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="container">
            <div class="stats-section">
                <div class="stat-card" data-aos="fade-up">
                    <div class="stat-value" id="total-views">0</div>
                    <div class="stat-label">Visualizaciones totales</div>
                </div>
                <div class="stat-card" data-aos="fade-up" data-aos-delay="100">
                    <div class="stat-value" id="quality">--</div>
                    <div class="stat-label">Calidad</div>
                </div>
                <div class="stat-card" data-aos="fade-up" data-aos-delay="200">
                    <div class="stat-value" id="upload-date">--</div>
                    <div class="stat-label">√öltima actualizaci√≥n</div>
                </div>
            </div>

            <!-- Secci√≥n de pel√≠culas relacionadas -->
            <div class="related-section">
                <h2 class="section-title">Pel√≠culas que te pueden interesar</h2>
                <div class="related-movies-container">
                    <button class="scroll-button left" id="scroll-left">
                        <span class="material-icons-round">chevron_left</span>
                    </button>
                    <div class="related-movies-scroll" id="related-movies">
                        <!-- Las pel√≠culas relacionadas se cargar√°n aqu√≠ -->
                    </div>
                    <button class="scroll-button right" id="scroll-right">
                        <span class="material-icons-round">chevron_right</span>
                    </button>
                </div>
            </div>
        </div>
    </main>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/aos/2.3.4/aos.js"></script>
    <script src="https://cdn.plyr.io/3.7.8/plyr.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/hls.js@latest"></script>
    <script>
// Inicializar AOS
AOS.init({
    duration: 800,
    once: true
});

// API Keys
const MEDIAPANEL_API_KEY = 'cfdfa64a3655b726f80396e82afa925827e6ddceef28350b70bc02179e690f44';
const TMDB_API_KEY = 'cc5b94165972aa509a349161d13d4fc9';

// Variables globales
let plyrInstance = null;
let hls = null;
let currentMovieData = null;

// Funci√≥n para mostrar/ocultar carga
const toggleLoading = (show) => {
    const loader = document.getElementById('loading-message');
    if (show) {
        loader.querySelector('.loading-text').textContent = 'Cargando datos de pel√≠cula...';
        loader.classList.add('active');
    } else {
        loader.classList.remove('active');
    }
};

// Configurar bot√≥n "Ver m√°s/menos"
const setupReadMoreButton = () => {
    const readMoreBtn = document.getElementById('read-more');
    const synopsisContainer = document.getElementById('synopsis-container');
    
    // Limpiar evento anterior
    const newReadMoreBtn = readMoreBtn.cloneNode(true);
    readMoreBtn.parentNode.replaceChild(newReadMoreBtn, readMoreBtn);
    
    newReadMoreBtn.addEventListener('click', () => {
        synopsisContainer.classList.toggle('collapsed');
        newReadMoreBtn.textContent = synopsisContainer.classList.contains('collapsed') ? 'Ver m√°s' : 'Ver menos';
    });
};

// Cargar datos de TMDB
const loadTMDBData = async (tmdbId) => {
    const res = await fetch(`https://api.themoviedb.org/3/movie/${tmdbId}?api_key=${TMDB_API_KEY}&language=es`);
    if (!res.ok) throw new Error('Error al cargar datos de TMDB');
    return await res.json();
};

// Cargar datos de MediaPanel
const loadMediaPanelData = async (tmdbId) => {
    const res = await fetch(`https://epicstream.xyz.mediapanel.site/api.php?api_key=${MEDIAPANEL_API_KEY}&type=peliculas&tmdb_id=${tmdbId}`);
    if (!res.ok) throw new Error('Error al cargar datos de MediaPanel');
    const data = await res.json();
    return data.data?.[0] || null;
};

// Actualizar UI con datos de TMDB
const updateUIWithTMDBData = (data) => {
    document.getElementById('movie-backdrop').style.backgroundImage = `url(https://image.tmdb.org/t/p/original${data.backdrop_path})`;
    const poster = document.getElementById('movie-poster');
    poster.src = `https://image.tmdb.org/t/p/w500${data.poster_path}`;
    poster.alt = data.title;
    
    document.getElementById('movie-title').textContent = data.title;
    document.getElementById('release-date').textContent = new Date(data.release_date).toLocaleDateString('es-ES');
    document.getElementById('runtime').textContent = `${data.runtime} minutos`;
    document.getElementById('rating').textContent = data.vote_average.toFixed(1);
    document.getElementById('synopsis').textContent = data.overview || 'Sin descripci√≥n disponible';
    
    const genresContainer = document.getElementById('genres');
    genresContainer.innerHTML = data.genres?.length 
        ? data.genres.map(g => `<span class="genre-tag">${g.name}</span>`).join('')
        : '<span class="genre-tag">Sin g√©neros especificados</span>';
};

// Actualizar UI con datos de MediaPanel
const updateUIWithMediaPanelData = (data) => {
    document.getElementById('total-views').textContent = parseInt(data?.total_visitas || 0).toLocaleString();
    document.getElementById('quality').textContent = (data?.calidad || 'HD').toUpperCase();
    document.getElementById('upload-date').textContent = data?.fecha_subida 
        ? new Date(data.fecha_subida).toLocaleDateString('es-ES')
        : '--';

    const streamOptions = document.getElementById('stream-options');
    const playButton = document.getElementById('play-button');
    
    if (!data?.enlaces?.length) {
        streamOptions.innerHTML = '<p style="padding: 1.5rem; color: var(--text-secondary);">No hay opciones disponibles</p>';
        playButton.disabled = true;
        return;
    }

    streamOptions.innerHTML = data.enlaces.map((enlace, i) => `
        <button class="stream-option" data-option="${i}">
            <span class="material-icons-round">${enlace.tipo === 'embed' ? 'language' : 'movie'}</span>
            <span>${enlace.nombre || `Opci√≥n ${i + 1}`}</span>
        </button>
    `).join('');
    playButton.disabled = false;
};

// Cargar pel√≠culas relacionadas (FUNCI√ìN MEJORADA)
const loadAndDisplayRelatedMovies = async (currentTmdbId) => {
    try {
        const res = await fetch(`https://epicstream.xyz.mediapanel.site/api_search.php?api_key=${MEDIAPANEL_API_KEY}&type=peliculas`);
        if (!res.ok) throw new Error('Error al cargar recomendaciones');
        
        const allMovies = (await res.json()).data || [];
        const filteredMovies = allMovies.filter(m => m.id_tmdb !== currentTmdbId);
        const relatedMovies = getRandomItems(filteredMovies, 10);

        // Cargar detalles de cada pel√≠cula desde TMDB para obtener las puntuaciones reales
        const moviesWithDetails = await Promise.all(
            relatedMovies.map(async movie => {
                try {
                    const tmdbRes = await fetch(`https://api.themoviedb.org/3/movie/${movie.id_tmdb}?api_key=${TMDB_API_KEY}&language=es`);
                    if (!tmdbRes.ok) return movie;
                    
                    const tmdbData = await tmdbRes.json();
                    return {
                        ...movie,
                        vote_average: tmdbData.vote_average,
                        poster_path: tmdbData.poster_path
                    };
                } catch (error) {
                    console.error(`Error al cargar detalles de TMDB para ${movie.id_tmdb}:`, error);
                    return movie;
                }
            })
        );

        const container = document.getElementById('related-movies');
        container.innerHTML = moviesWithDetails.map(movie => {
            // Usar la puntuaci√≥n de TMDB si est√° disponible, de lo contrario usar 0.0
            const rating = movie.vote_average ? parseFloat(movie.vote_average).toFixed(1) : '0.0';
            const year = movie.fecha_lanzamiento ? movie.fecha_lanzamiento.split('-')[0] : 'N/A';
            const posterUrl = movie.poster_path 
                ? `https://image.tmdb.org/t/p/w500${movie.poster_path}`
                : 'https://via.placeholder.com/500x750?text=No+Poster';

            return `
                <div class="related-movie" data-id="${movie.id_tmdb}">
                    <img src="${posterUrl}" class="related-poster"
                         onerror="this.src='https://via.placeholder.com/500x750?text=No+Poster'">
                    <div class="related-info">
                        <h3 class="related-title">${movie.titulo || 'Sin t√≠tulo'}</h3>
                        <div class="related-meta">
                            <span>${year}</span>
                            <span>
                                <i class="material-icons-round" style="font-size:1rem;vertical-align:middle">star</i>
                                ${rating}
                            </span>
                        </div>
                    </div>
                </div>
            `;
        }).join('');

        // Configurar eventos click para cambiar de pel√≠cula
        container.querySelectorAll('.related-movie').forEach(movieEl => {
            movieEl.addEventListener('click', async () => {
                toggleLoading(true);
                const tmdbId = movieEl.dataset.id;
                
                try {
                    // 1. Cargar todos los datos necesarios
                    const [tmdbData, panelData] = await Promise.all([
                        loadTMDBData(tmdbId),
                        loadMediaPanelData(tmdbId)
                    ]);

                    // 2. Actualizar la interfaz completamente
                    updateUIWithTMDBData(tmdbData);
                    updateUIWithMediaPanelData(panelData);
                    localStorage.setItem('tmdbId', tmdbId);
                    currentMovieData = panelData;

                    // 3. Actualizar URL sin recargar
                    window.history.pushState({}, '', `?id=${tmdbId}`);

                    // 4. Reconfigurar eventos
                    setupPlayer(panelData);
                    setupReadMoreButton();

                    // 5. Volver a cargar recomendaciones (para evitar mostrar la pel√≠cula actual)
                    await loadAndDisplayRelatedMovies(tmdbId);

                    // 6. Scroll al inicio de la p√°gina
                    window.scrollTo({ top: 0, behavior: 'smooth' });

                } catch (error) {
                    console.error('Error al cargar pel√≠cula:', error);
                    alert('Error al cargar la pel√≠cula seleccionada');
                } finally {
                    toggleLoading(false);
                }
            });
        });

        setupScrollButtons();

    } catch (error) {
        console.error('Error en recomendaciones:', error);
        document.querySelector('.related-section').innerHTML = `
            <p style="color: var(--text-secondary); text-align: center;">
                No se pudieron cargar las recomendaciones
            </p>
        `;
    }
};

// Configurar reproductor
const setupPlayer = (movieData) => {
    const playerContainer = document.getElementById('player-container');
    const playButton = document.getElementById('play-button');
    const streamOptions = document.getElementById('stream-options');

    // Limpiar el reproductor anterior
    playerContainer.innerHTML = '';
    playerContainer.style.display = 'none';
    
    // Limpiar eventos anteriores del bot√≥n de reproducci√≥n
    const newPlayButton = playButton.cloneNode(true);
    playButton.parentNode.replaceChild(newPlayButton, playButton);
    
    // Limpiar opciones de streaming anteriores
    const newStreamOptions = streamOptions.cloneNode(true);
    streamOptions.parentNode.replaceChild(newStreamOptions, streamOptions);
    
    // Configurar nuevo evento para el bot√≥n de reproducci√≥n
    newPlayButton.addEventListener('click', () => {
        newStreamOptions.classList.toggle('active');
    });

    // Configurar eventos para las opciones de streaming
    newStreamOptions.addEventListener('click', async (e) => {
        const optionBtn = e.target.closest('.stream-option');
        if (!optionBtn || !movieData?.enlaces) return;

        const optionIndex = parseInt(optionBtn.dataset.option);
        const enlace = movieData.enlaces[optionIndex];
        
        // Limpiar reproductor anterior
        if (plyrInstance) {
            plyrInstance.destroy();
            plyrInstance = null;
        }
        if (hls) {
            hls.destroy();
            hls = null;
        }
        
        playerContainer.innerHTML = '<div class="player-loading"><div class="loading-spinner"></div><div>Cargando video...</div></div>';
        playerContainer.style.display = 'block';

        try {
            if (enlace.tipo === 'embed') {
                playerContainer.innerHTML = `
                    <iframe src="${enlace.opcion}" 
                            frameborder="0" 
                            allowfullscreen
                            allow="autoplay; fullscreen"
                            style="width:100%;height:100%;background:#000;">
                    </iframe>
                `;
                return;
            }

            playerContainer.innerHTML = `
                <video id="player" playsinline controls 
                       style="width:100%;height:100%;background:#000;"
                       poster="${document.getElementById('movie-poster').src}">
                </video>
                
                
                
                
                
            `;
            
            
            
            
            
            const videoElement = document.getElementById('player');
            
            if (enlace.opcion.endsWith('.m3u8')) {
                if (Hls.isSupported()) {
                    hls = new Hls({
                        enableWorker: true,
                        lowLatencyMode: true,
                        maxBufferLength: 30
                    });
                    hls.loadSource(enlace.opcion);
                    hls.attachMedia(videoElement);
                    hls.on(Hls.Events.MANIFEST_PARSED, () => initializePlyr(videoElement));
                } else if (videoElement.canPlayType('application/vnd.apple.mpegurl')) {
                    videoElement.src = enlace.opcion;
                    videoElement.addEventListener('loadedmetadata', () => initializePlyr(videoElement));
                }
            } else {
                videoElement.src = enlace.opcion;
                videoElement.addEventListener('loadedmetadata', () => initializePlyr(videoElement));
            }
        } catch (error) {
            console.error('Error en reproductor:', error);
            playerContainer.innerHTML = `
                <div class="player-error">
                    <span class="material-icons-round">error</span>
                    <h3>Error al cargar el video</h3>
                    <p>${error.message}</p>
                    <button class="retry-button">Reintentar</button>
                </div>
            `;
            document.querySelector('.player-error .retry-button').addEventListener('click', () => {
                setupPlayer(currentMovieData);
            });
        }
    });
};




// Inicializar Plyr
const initializePlyr = (videoElement) => {
    if (plyrInstance) plyrInstance.destroy();
    plyrInstance = new Plyr(videoElement, {
        autoplay: false,
        controls: ['play-large', 'play', 'fast-forward' , 'progress', 'current-time', 'mute', 'volume', 'fullscreen', 'download'],
        settings: ['quality', 'speed'],
        keyboard: { focused: true, global: true }
    });
};

// Manejar cambios en la URL (para navegaci√≥n hacia atr√°s/adelante)
window.addEventListener('popstate', async () => {
    const urlParams = new URLSearchParams(window.location.search);
    const tmdbId = urlParams.get('id') || localStorage.getItem('tmdbId');
    
    if (tmdbId) {
        toggleLoading(true);
        try {
            const [tmdbData, panelData] = await Promise.all([
                loadTMDBData(tmdbId),
                loadMediaPanelData(tmdbId)
            ]);
            
            currentMovieData = panelData;
            updateUIWithTMDBData(tmdbData);
            updateUIWithMediaPanelData(panelData);
            setupPlayer(panelData);
            await loadAndDisplayRelatedMovies(tmdbId);
            
        } catch (error) {
            console.error('Error al cargar pel√≠cula:', error);
            alert('Error al cargar los datos de la pel√≠cula');
        } finally {
            toggleLoading(false);
        }
    }
});

// Inicializaci√≥n principal
document.addEventListener('DOMContentLoaded', async () => {
    // Configurar bot√≥n "Ver m√°s/menos" primero
    setupReadMoreButton();

    const urlParams = new URLSearchParams(window.location.search);
    const tmdbId = urlParams.get('id') || localStorage.getItem('tmdbId');
    
    if (!tmdbId) {
        alert('No se especific√≥ una pel√≠cula');
        return;
    }

    localStorage.setItem('tmdbId', tmdbId);
    toggleLoading(true);
    
    try {
        const [tmdbData, panelData] = await Promise.all([
            loadTMDBData(tmdbId),
            loadMediaPanelData(tmdbId)
        ]);
        
        // Guardar datos actuales en variable global
        currentMovieData = panelData;
        
        updateUIWithTMDBData(tmdbData);
        updateUIWithMediaPanelData(panelData);
        setupPlayer(panelData);
        await loadAndDisplayRelatedMovies(tmdbId);
        
    } catch (error) {
        console.error('Error inicial:', error);
        alert('Error al cargar los datos de la pel√≠cula');
    } finally {
        toggleLoading(false);
    }
});

// Helper functions
const setupScrollButtons = () => {
    const container = document.querySelector('.related-movies-container');
    const scrollLeft = document.getElementById('scroll-left');
    const scrollRight = document.getElementById('scroll-right');
    const scrollContent = document.querySelector('.related-movies-scroll');

    scrollLeft.addEventListener('click', () => {
        scrollContent.scrollBy({ left: -300, behavior: 'smooth' });
    });

    scrollRight.addEventListener('click', () => {
        scrollContent.scrollBy({ left: 300, behavior: 'smooth' });
    });

    scrollContent.addEventListener('scroll', () => {
        const showLeft = scrollContent.scrollLeft > 0;
        const showRight = scrollContent.scrollLeft < (scrollContent.scrollWidth - scrollContent.clientWidth - 5);
        
        scrollLeft.style.display = showLeft ? 'flex' : 'none';
        scrollRight.style.display = showRight ? 'flex' : 'none';
    });

    // Estado inicial
    scrollContent.dispatchEvent(new Event('scroll'));
};

const getRandomItems = (array, count) => {
    if (array.length <= count) return array.slice();
    const shuffled = [...array].sort(() => 0.5 - Math.random());
    return shuffled.slice(0, count);
};
</script>


<!--ESTE SCRIPT VA AL FINAL DE LA PLANTILLA ENTRADA PELICULAS, ANTES DE QUE CIERRE EL </body>-->
<script>
    document.addEventListener('DOMContentLoaded', () => {
        const tmdbId = localStorage.getItem('tmdbId'); // Obt√©n el ID de TMDB desde localStorage
        const API_KEY = 'cfdfa64a3655b726f80396e82afa925827e6ddceef28350b70bc02179e690f44';

        if (tmdbId) {
            // Temporizador de 10 segundos
            const timer = setTimeout(() => {
                // Si el usuario permanece 10 segundos, realiza la solicitud AJAX
                const apiUrl = 'https://epicstream.xyz.mediapanel.site/visitas-api.php?api_key=' + API_KEY;

                // Solicitud POST para registrar la visita
                fetch(apiUrl, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        tmdb_id: tmdbId,  // Enviar el tmdbId correctamente
                        type: 'pelicula'  // O 'serie', dependiendo de tu caso
                    }),
                })
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Error en la respuesta de la API');
                    }
                    return response.json();
                })
                .then(data => {
                    console.log('Visita registrada:', data); // Respuesta exitosa
                })
                .catch(error => {
                    console.error('Error al registrar la visita:', error); // Manejo de errores
                });
            }, 10000);  // 10000 milisegundos = 10 segundos

            // Si el usuario abandona la p√°gina antes de los 10 segundos, cancelamos el temporizador
            window.addEventListener('beforeunload', () => {
                clearTimeout(timer);
            });
        } else {
            console.error('No se encontr√≥ el tmdbId en localStorage');
        }
    });
    
    
    

   
   
   
    
    
    
    </script> 
    
    
<script>
document.addEventListener('DOMContentLoaded', () => {
    const style = document.createElement('style');
    style.innerHTML = `
        @keyframes scrollBackdrop {
            0% { background-position: 0% center; }
            100% { background-position: 100% center; }
        }

        .movie-hero {
            animation: scrollBackdrop 50s linear infinite;
            background-size: 400% auto;
        }
    `;
    document.head.appendChild(style);
});



</script>



    


</body>
</html>

<!-- REPRODUCTOR M3U SERIES -->
<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=no">
    <title>IPTV Moderno</title>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.2/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-icons/1.11.3/font/bootstrap-icons.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/animate.css/4.1.1/animate.min.css" rel="stylesheet">
    <link href="https://cdn.plyr.io/3.7.8/plyr.css" rel="stylesheet" />
    <style>
        body {
            background-color: #000;
            color: #fff;
            font-family: 'Roboto', sans-serif;
            display: flex;
            flex-direction: column;
            height: 100vh;
            margin: 0;
        }

        #header {
            background: #000;
            padding: 10px 20px;
            color: #fff;
            display: flex;
            align-items: center;
            justify-content: space-between;
            border-bottom: 2px solid #444;
        }

        #header img {
            height: 50px;
            margin-right: auto;
        }

        #player-container {
            background-color: #000;
            width: 100%;
            height: 320px;
            position: sticky;
            top: 0;
            z-index: 100;
        }

        #videoPlayer {
            width: 100%;
            height: 250px;
            max-height: 60vh;
        }

        @media (min-width: 768px) {
            #videoPlayer {
                max-height: 70vh;
            }
        }

        @media (min-width: 1200px) {
            #videoPlayer {
                max-height: 80vh;
            }
        }

        #search-container, #categories-container {
            margin: 10px 20px;
        }

        #search, #category-select {
            width: 100%;
            padding: 10px;
            font-size: 1rem;
            border: none;
            border-radius: 5px;
            background-color: #222;
            color: #fff;
        }

        #playlist-container {
            flex-grow: 1;
            overflow-y: auto;
            padding: 10px 20px;
        }

        #playlist {
            display: flex;
            flex-direction: column;
            gap: 10px;
        }

        #playlist li {
            padding: 15px;
            background-color: #222;
            border-radius: 5px;
            cursor: pointer;
            display: flex;
            align-items: center;
            gap: 10px;
            transition: background-color 0.3s, transform 0.2s;
        }

        #playlist li:hover {
            background-color: #333;
            transform: scale(1.02);
        }

        #playlist li.active {
            background-color: #555;
        }

        #playlist li .icon {
            font-size: 1.5rem;
            color: #007bff;
        }

        #ad-container {
            position: fixed;
            top: 0;
            left: 0;
            width: 1px;
            height: 1px;
            background: rgba(0, 0, 0, 0.9);
            display: flex;
            justify-content: center;
            align-items: center;
            z-index: 1000;
            display: none;
        }

        #ad-container iframe {
            width: 90%;
            height: 60%;
            border: none;
        }

        #close-ad {
            position: absolute;
            top: 20px;
            right: 20px;
            background: red;
            color: white;
            border: none;
            padding: 10px;
            cursor: pointer;
            z-index: 1100;
        }

        #close-ad:hover {
            background: darkred;
        }

        body::before {
            content: "";
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: url('') no-repeat center center/cover;
            filter: brightness(20%) blur(2px);
            z-index: -2;
        }
    </style>
</head>
<body>
    <div id="player-container">
        <video id="videoPlayer" controls playsinline></video>
    </div>

    <div id="ad-container">
        <button id="close-ad">X</button>
    </div>

    <div id="search-container">
        <input type="text" id="search" placeholder="Buscar capÃ­tulo..." onkeyup="filterChannels()">
    </div>

    <div id="categories-container">
        <select id="category-select" onchange="filterByCategory(this.value)">
            <option value="">Todas las Temporadas</option>
        </select>
    </div>

    <div id="playlist-container">
        <ul id="playlist"></ul>
    </div>

    <script src="https://cdn.plyr.io/3.7.8/plyr.polyfilled.js"></script>
    <script>
        const m3uUrl = 'AQUI_VA_EL_LINK_DE_CANALES';
        const playlistElement = document.getElementById('playlist');
        const categorySelect = document.getElementById('category-select');
        const searchInput = document.getElementById('search');
        const adContainer = document.getElementById('ad-container');
        const closeAdButton = document.getElementById('close-ad');
        const videoElement = document.getElementById('videoPlayer');
        let channels = [];
        let categories = new Set();
        let adShown = false;
        let player = new Plyr(videoElement, { autoplay: true });

        async function loadM3U() {
            try {
                const response = await fetch(m3uUrl);
                const data = await response.text();
                parseM3U(data);
            } catch (error) {
                console.error('Error cargando lista M3U:', error);
            }
        }

        function parseM3U(data) {
            const lines = data.split('\n');
            let currentChannel = null;
            channels = [];

            lines.forEach(line => {
                line = line.trim();
                if (line.startsWith('#EXTINF')) {
                    const groupMatch = line.match(/group-title="([^"]+)"/);
                    currentChannel = {
                        name: line.split(',')[1],
                        url: '',
                        category: groupMatch ? groupMatch[1] : 'General'
                    };
                    categories.add(currentChannel.category);
                } else if (line && currentChannel) {
                    currentChannel.url = line;
                    channels.push(currentChannel);
                    currentChannel = null;
                }
            });

            renderCategories();
            displayChannels(channels);
        }

        function renderCategories() {
            categories.forEach(category => {
                const option = document.createElement('option');
                option.value = category;
                option.textContent = category;
                categorySelect.appendChild(option);
            });
        }

        function displayChannels(channelList) {
            playlistElement.innerHTML = '';
            channelList.forEach(channel => {
                const li = document.createElement('li');
                li.innerHTML = `<i class="bi bi-play icon"></i> ${channel.name}`;
                li.onclick = () => playChannel(channel.url, li);
                playlistElement.appendChild(li);
            });
        }

        function playChannel(url, listItem) {
            player.source = {
                type: 'video',
                sources: [
                    {
                        src: url,
                        type: 'application/vnd.apple.mpegurl'
                    }
                ]
            };

            document.querySelectorAll('#playlist li').forEach(item => item.classList.remove('active'));
            listItem.classList.add('active');

            if (!adShown) {
                setTimeout(() => {
                    adContainer.style.display = 'flex';
                }, 8000);
                adShown = true;
            }
        }

        function filterChannels() {
            const searchTerm = searchInput.value.toLowerCase();
            const filteredChannels = channels.filter(channel =>
                channel.name.toLowerCase().includes(searchTerm)
            );
            displayChannels(filteredChannels);
        }

        function filterByCategory(category) {
            const filteredChannels = category
                ? channels.filter(channel => channel.category === category)
                : channels;
            displayChannels(filteredChannels);
        }

        closeAdButton.addEventListener('click', () => {
            adContainer.style.display = 'none';
            player.play();
        });

        loadM3U();
    </script>
</body>
</html>
